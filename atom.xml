<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yc&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-02T08:00:44.265Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Jenkins安装与部署</title>
    <link href="http://yoursite.com/Jenkins/201804021357/"/>
    <id>http://yoursite.com/Jenkins/201804021357/</id>
    <published>2018-04-02T05:57:25.000Z</published>
    <updated>2018-04-02T08:00:44.265Z</updated>
    
    <content type="html"><![CDATA[<p>我的环境 【Jenkins 2.107.1】 【jdk1.8.0_45】</p><p>在官网下载 <a href="https://jenkins.io/" title="https://jenkins.io/" target="_blank" rel="noopener">https://jenkins.io/</a> 最新war包，使用下方命令直接运行就可以。前提是确保已经正确安装了JDK并且配置环境变量。</p><pre><code>java -jar jenkins.war</code></pre><p>默认使用8080端口，自定义需要追加参数</p><pre><code>java -jar jenkins.war --httpPort=8000</code></pre><p>运行后打开浏览器在地址栏输入 <a href="http://localhost:8080" title="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> （端口号可根据实际情况修改），打开页面中指明路径的文件复制内容粘贴到表单，然后继续</p><p><img src="https://i.imgur.com/gjsZzyc.png" alt=""></p><p><img src="https://i.imgur.com/KWnFEoY.png" alt=""></p><p>若出现上图情况，则另打开一个空白页面地址栏输入 <a href="http://localhost:8000/pluginManager/advanced" title="http://localhost:8080/pluginManager/advanced" target="_blank" rel="noopener">http://localhost:8080/pluginManager/advanced</a> （端口号根据实际情况修改），在页面下方的【升级站点】中把 https 改成 http 然后提交，重启 Jenkins。正常情况如下图，直接点击【推荐安装】然后等待安装。</p><p><img src="https://i.imgur.com/fKF8sDf.png" alt=""></p><p>全部安装成功后，进入下一个页面创建用户后继续</p><p><img src="https://i.imgur.com/SeWun69.png" alt=""></p><p>主页面</p><p><img src="https://i.imgur.com/rudpq9p.png" alt=""></p><p>点击左侧【系统管理】-【全局工具配置】，下图是配置之前</p><p><img src="https://i.imgur.com/s0Jtnsj.png" alt=""></p><p>下图是配置之后</p><p><img src="https://i.imgur.com/wdSYm4x.png" alt=""></p><p>这个时候新建时是没有【构建一个maven项目】选项的，所以需要下载 Maven Integration 插件，在首页点击【系统管理】-【管理插件】-【可选插件】右侧表单输入 Maven Integration ，在列表中选中后点击【直接安装】。安装完毕回到首页，点击【新建任务】-【构建一个maven项目】，任务名称自行填写，具体如下图</p><p><img src="https://i.imgur.com/AgRRWic.png" alt=""></p><p>确认后进入任务配置界面，下图为默认配置</p><p><img src="https://i.imgur.com/LqXMTYk.png" alt=""></p><p>下图为编辑过后</p><p><img src="https://i.imgur.com/EMtpRRw.png" alt=""></p><p>注意：需要下载 Deploy to container 插件才可以配置【构建后操作】中的远程部署到 tomcat。我填写的 tomcat 地址的端口号是因为我的Jenkins的端口是8000，灵活修改。tomcat 还需要配置用户并保持启动。下面是我的 tomcat-users.xml 文件中 <tomcat-users> 节点的内容</tomcat-users></p><pre><code>&lt;tomcat-users&gt;    &lt;role rolename=&quot;manager-gui&quot;/&gt;    &lt;role rolename=&quot;manager-script&quot;/&gt;    &lt;role rolename=&quot;manager-jmx&quot;/&gt;    &lt;role rolename=&quot;manager-status&quot;/&gt;    &lt;role rolename=&quot;manager&quot;/&gt;    &lt;role rolename=&quot;admin&quot;/&gt;    &lt;user username=&quot;liyachuan&quot; password=&quot;123456&quot; roles=&quot;manager-gui,manager-script,manager-jmx,manager-status,admin,manager&quot;/&gt;&lt;/tomcat-users&gt;</code></pre><p>最终，在项目页面中点击【立即构建】就完事儿了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我的环境 【Jenkins 2.107.1】 【jdk1.8.0_45】&lt;/p&gt;
&lt;p&gt;在官网下载 &lt;a href=&quot;https://jenkins.io/&quot; title=&quot;https://jenkins.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener
      
    
    </summary>
    
      <category term="Jenkins" scheme="http://yoursite.com/categories/Jenkins/"/>
    
    
      <category term="Jenkins" scheme="http://yoursite.com/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Android 学习记录（一）：发送 http 请求</title>
    <link href="http://yoursite.com/Android/201803211219/"/>
    <id>http://yoursite.com/Android/201803211219/</id>
    <published>2018-03-21T04:20:02.000Z</published>
    <updated>2018-03-21T04:27:01.571Z</updated>
    
    <content type="html"><![CDATA[<pre><code>/** * 使用异步http框架发送get请求 * * @param path get路径，中文参数需要编码（URLEncoder.encode） */public void doGet(String path) {    AsyncHttpClient httpClient = new AsyncHttpClient();    httpClient.get(path, new AsyncHttpResponseHandler() {        @Override        public void onSuccess(int statusCode, Header[] headers, byte[] responseBody) {            if (statusCode == 200) {                try {                    //此处应该根据服务端的编码格式进行编码，否则会乱码                    System.out.println(&quot;Post:&quot;+new String(responseBody, &quot;utf-8&quot;));                } catch (UnsupportedEncodingException e) {                    e.printStackTrace();                }            }        }        @Override        public void onFailure(int statusCode, Header[] headers, byte[] responseBody, Throwable error) {            System.out.println(&quot;-------Error-------&quot;);        }    });}/** * 使用异步http框架发送get请求 * * @param path */public void doPost(String path) {    AsyncHttpClient httpClient = new AsyncHttpClient();    RequestParams params = new RequestParams();    params.put(&quot;&quot;, &quot;&quot;);//value可以是流、文件、对象等其他类型,很强大!!    httpClient.post(path, params, new AsyncHttpResponseHandler() {        @Override        public void onSuccess(int statusCode, Header[] headers, byte[] responseBody) {            if (statusCode == 200) {                try {                    //此处应该根据服务端的编码格式进行编码，否则会乱码                    System.out.println(&quot;Get:&quot;+new String(responseBody, &quot;utf-8&quot;));                } catch (UnsupportedEncodingException e) {                    e.printStackTrace();                }            }        }        @Override        public void onFailure(int statusCode, Header[] headers, byte[] responseBody, Throwable error) {            System.out.println(&quot;-------Error-------&quot;);        }    });}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;/**
 * 使用异步http框架发送get请求
 *
 * @param path get路径，中文参数需要编码（URLEncoder.encode）
 */
public void doGet(String path) {
    AsyncHttpCl
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Git常见问题及解决方案</title>
    <link href="http://yoursite.com/Git/201803201527/"/>
    <id>http://yoursite.com/Git/201803201527/</id>
    <published>2018-03-19T07:27:27.000Z</published>
    <updated>2018-03-20T01:22:41.110Z</updated>
    
    <content type="html"><![CDATA[<h1 id="warning-LF-will-be-replaced-by-CRLF-in-config-yml-The-file-will-have-its-original-line-endings-in-your-working-directory"><a href="#warning-LF-will-be-replaced-by-CRLF-in-config-yml-The-file-will-have-its-original-line-endings-in-your-working-directory" class="headerlink" title="warning: LF will be replaced by CRLF in _config.yml. The file will have its original line endings in your working directory."></a>warning: LF will be replaced by CRLF in _config.yml. The file will have its original line endings in your working directory.</h1><p>原文地址：<a href="http://blog.csdn.net/starry_night9280/article/details/53207928" title="原文链接" target="_blank" rel="noopener">http://blog.csdn.net/starry_night9280/article/details/53207928</a></p><p>问题出在不同操作系统所使用的换行符是不一样的，下面罗列一下三大主流操作系统的换行符：</p><blockquote><p>Uinx/Linux采用换行符LF表示下一行（LF：LineFeed，中文意思是换行）。</p></blockquote><blockquote><p>Dos和Windows采用回车+换行CRLF表示下一行（CRLF：CarriageReturn LineFeed，中文意思是回车换行）。</p></blockquote><blockquote><p>Mac OS采用回车CR表示下一行（CR：CarriageReturn，中文意思是回车）。</p></blockquote><p>在Git中，可以通过以下命令来显示当前你的Git中采取哪种对待换行符的方式</p><pre><code>git config core.autocrlf</code></pre><p>此命令会有三个输出，“true”，“false”或者“input”</p><blockquote><p>为true时，Git会将你add的所有文件视为文本问价你，将结尾的CRLF转换为LF，而checkout时会再将文件的LF格式转为CRLF格式。</p><p>为false时，line endings不做任何改变，文本文件保持其原来的样子。</p><p>为input时，add时Git会把CRLF转换为LF，而check时仍旧为LF，所以Windows操作系统不建议设置此值。</p></blockquote><p><strong>解决方案</strong>：</p><p>将core.autocrlf设为false即可解决这个问题，不过如果你和你的伙伴只工作于Windows平台或者Linux平台，那么没问题，不过如果是存在跨平台的现象的话，还是需要考虑一下。但当 core autocrlf为true时，还有一个需要慎重的地方，当你上传一个二进制文件，Git可能会将二进制文件误以为是文本文件，从而也会修改你的二进制文件，从而产生隐患。</p><p>PS:附上修改autocrlf的命令，以改为true为例：</p><pre><code>git config --global core.autocrlf true   #true的位置放你想使autocrlf成为的结果，true，false或者input  </code></pre><h1 id="Error-ssh-connect-to-host-github-com-port-22-Connection-timed-out…（Git连接超时）"><a href="#Error-ssh-connect-to-host-github-com-port-22-Connection-timed-out…（Git连接超时）" class="headerlink" title="Error: ssh: connect to host github.com port 22: Connection timed out…（Git连接超时）"></a>Error: ssh: connect to host github.com port 22: Connection timed out…（Git连接超时）</h1><p>解决方案为<br><br>找到安装Git的根目录/etc/ssh/ssh_config文件，用编辑器打开后添加下列内容</p><pre><code>Host github.comUser gitHostname ssh.github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/id_rsaPort 443</code></pre><p>执行 <code>ssh -T git@github.com</code> 测试git是否成功连接github</p><p><img src="https://i.imgur.com/QarijrH.png" alt=""></p><p>询问是否确定想继续连接时直接 yes 就可以，完工！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;warning-LF-will-be-replaced-by-CRLF-in-config-yml-The-file-will-have-its-original-line-endings-in-your-working-directory&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 备份与恢复</title>
    <link href="http://yoursite.com/hexo/201803191328/"/>
    <id>http://yoursite.com/hexo/201803191328/</id>
    <published>2018-03-19T05:28:05.000Z</published>
    <updated>2018-03-20T01:24:20.640Z</updated>
    
    <content type="html"><![CDATA[<p>前几天搭建好 hexo 后，接下来就研究如何对 hexo 进行备份，解决换电脑后无法编辑博客的尴尬情景。解决方案网上有很多，在此记录一种刚测试通过的处理流程。</p><h2 id="在码云或者GitHub上创建代码库，保留以下目录"><a href="#在码云或者GitHub上创建代码库，保留以下目录" class="headerlink" title="在码云或者GitHub上创建代码库，保留以下目录"></a>在码云或者GitHub上创建代码库，保留以下目录</h2><pre><code>scaffoldssourcethemes_config.ymlpackage.json.gitgnore</code></pre><p>注：_config.yml是站点配置文件，theme中是主题，source博客编辑文件，scaffolds文章模板，package.json包使用说明和.gitgnore限定提交的时候哪些文件可以忽略（.gitgnore这个文件我这里是 .npmignore）。最后推送至远程库。</p><h2 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h2><ul><li>node.js</li><li>Git</li><li>MarkDownPad 2</li></ul><p>安装过程参考搭建过程，只需注意不要执行 hexo init，据说会清空 _config.yml 的内容至默认。把备份的代码库 clone 到本地，打开命令行至根目录依次执行以下指令</p><pre><code>npm install hexo-cli -gnpm install hexo --savenpm installhexo generate</code></pre><p>安装之前装过的组件</p><pre><code>npm install hexo-deployer-git --savenpm install hexo-generator-feed -savenpm install hexo-generator-sitemap -savenpm install hexo-generator-searchdb --savenpm install hexo-wordcount --save</code></pre><p>最后启动测试一下是否正常运行就完事了，之后新增或修改文章后记得推送到代码库就可以（还是那几个文件）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前几天搭建好 hexo 后，接下来就研究如何对 hexo 进行备份，解决换电脑后无法编辑博客的尴尬情景。解决方案网上有很多，在此记录一种刚测试通过的处理流程。&lt;/p&gt;
&lt;h2 id=&quot;在码云或者GitHub上创建代码库，保留以下目录&quot;&gt;&lt;a href=&quot;#在码云或者GitH
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Nginx域名跳转</title>
    <link href="http://yoursite.com/Nginx/201803171126/"/>
    <id>http://yoursite.com/Nginx/201803171126/</id>
    <published>2018-03-17T03:26:12.000Z</published>
    <updated>2018-03-20T01:24:20.642Z</updated>
    
    <content type="html"><![CDATA[<h1 id="利用修改-Nginx-的-nginx-conf-文件实现域名跳转"><a href="#利用修改-Nginx-的-nginx-conf-文件实现域名跳转" class="headerlink" title="利用修改 Nginx 的 nginx.conf 文件实现域名跳转"></a>利用修改 Nginx 的 nginx.conf 文件实现域名跳转</h1><pre><code>worker_processes  2;#工作进程的个数，一般与计算机的cpu核数一致  events {      worker_connections  1024;#单个进程最大连接数（最大连接数=连接数*进程数）  }  http {      include       mime.types; #文件扩展名与文件类型映射表      default_type  application/octet-stream;#默认文件类型      sendfile        on;#开启高效文件传输模式    keepalive_timeout  65; #长连接超时时间，单位是秒      gzip  on;#启用Gizp压缩      #服务器的集群      upstream  liyachuan.com {  #服务器集群名字           server    127.0.0.1:80  weight=1;#服务器配置   weight是权重的意思，权重越大，分配的概率越大。     }     #当前的Nginx的配置      server {          listen       80;#监听80端口，可以改成其他端口          server_name  59.110.170.223;##############   当前服务的域名          location / {                  proxy_pass https://liyachuan.github.io;              }         error_page   500 502 503 504  /50x.html;          location = /50x.html {              root   html;          }      }  }</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;利用修改-Nginx-的-nginx-conf-文件实现域名跳转&quot;&gt;&lt;a href=&quot;#利用修改-Nginx-的-nginx-conf-文件实现域名跳转&quot; class=&quot;headerlink&quot; title=&quot;利用修改 Nginx 的 nginx.conf 文件实现
      
    
    </summary>
    
      <category term="Nginx" scheme="http://yoursite.com/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat自动跳转</title>
    <link href="http://yoursite.com/Tomcat/201803162356/"/>
    <id>http://yoursite.com/Tomcat/201803162356/</id>
    <published>2018-03-16T15:56:52.000Z</published>
    <updated>2018-03-20T01:24:20.643Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tomcat自动跳转"><a href="#Tomcat自动跳转" class="headerlink" title="Tomcat自动跳转"></a>Tomcat自动跳转</h1><p>汗颜，有个笨方法用以实现自动跳转。将 webapps 下ROOT目录的 index.jsp 改为 index.jsp.bak 作为备份，创建 index.html 文件，内容为<br></p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;自动跳转&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;                    　　　　window.location.href=&quot;https://liyachuan.github.io&quot;; &lt;!--跳转页面--&gt;&lt;/script&gt;&lt;/html&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Tomcat自动跳转&quot;&gt;&lt;a href=&quot;#Tomcat自动跳转&quot; class=&quot;headerlink&quot; title=&quot;Tomcat自动跳转&quot;&gt;&lt;/a&gt;Tomcat自动跳转&lt;/h1&gt;&lt;p&gt;汗颜，有个笨方法用以实现自动跳转。将 webapps 下ROOT目录的 in
      
    
    </summary>
    
      <category term="Tomcat" scheme="http://yoursite.com/categories/Tomcat/"/>
    
    
      <category term="Tomcat" scheme="http://yoursite.com/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>搭建个人博客</title>
    <link href="http://yoursite.com/hexo/201803162112/"/>
    <id>http://yoursite.com/hexo/201803162112/</id>
    <published>2018-03-16T13:12:04.000Z</published>
    <updated>2018-03-20T01:23:53.047Z</updated>
    
    <content type="html"><![CDATA[<p>本文引用于 gdutxiaoxu的<a href="http://blog.csdn.net/gdutxiaoxu/article/details/53576018" target="_blank" rel="noopener">Hexo+GitHub搭建个人博客</a> 少做修改作为学习记录。</p><h1 id="记录今日搭建博客流程和遇到的问题"><a href="#记录今日搭建博客流程和遇到的问题" class="headerlink" title="记录今日搭建博客流程和遇到的问题"></a>记录今日搭建博客流程和遇到的问题</h1><ul><li>安装、配置Hexo</li><li>将Hexo与github page关联</li><li>发布文章</li><li>主题</li><li>添加sitemap和feed插件</li></ul><h1 id="安装、配置Hexo"><a href="#安装、配置Hexo" class="headerlink" title="安装、配置Hexo"></a>安装、配置Hexo</h1><ul><li><a href="https://nodejs.org/dist/v6.9.0/node-v6.9.0-x64.msi" target="_blank" rel="noopener">Windows Installer 64-bit</a></li><li><a href="https://nodejs.org/dist/v6.9.0/node-v6.9.0-x32.msi" target="_blank" rel="noopener">Windows Installer 32-bit</a></li></ul><p>根据Windows版本选择相应的安装文件（右键‘我的电脑’属性中查看）。下载完成后默认安装就可以，放置路径可以自行修改。安装结束后同时按下Win+R打开运行窗口，键入cmd后点击确定按钮。在打开的窗口中输入</p><pre><code>node -vnpm -v</code></pre><p>得到的结果若如下图所示，则说明安装成功<br><br><img src="https://i.imgur.com/WVaVzA8.png" alt=""><br><br><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git官网下载地址</a>，Git的安装过程同样保持默认就可以，安装路径可以自行修改。安装完成后Win+R打开命令行，输入<br></p><pre><code>git --version</code></pre><p>得到结果如下图则代表正确<br><br><img src="https://i.imgur.com/SeSJFLm.png" alt=""><br></p><h2 id="GitHub账户注册与配置"><a href="#GitHub账户注册与配置" class="headerlink" title="GitHub账户注册与配置"></a>GitHub账户注册与配置</h2><p>Git方面博主也是新手，这里不再过多阐述。可以参考<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰的Git教程</a>自行学习，写的非常非常好<br><br>在完成注册之后创建代码库，如图所示<br><br><img src="https://i.imgur.com/VcppaVl.png" alt=""><br><br>在创建代码库页面中，Repository name表单中填写yourname.github.io，Description(optional)选填。如图所示<br><br><img src="https://i.imgur.com/OVtk7Bj.png" alt=""><br><br>我的名字是liyachuan,所以我在此处填写liyachuan.github.io。填写完成后点击创建代码库按钮级进行提交。在创建成功后的页面上面的tap中选择settings，下拉至GitHub Pages。若如下图所示则说明该功能开启。没有的话请百度一下，因为我创建的时候GitHub就自动配置了，我没有配置过（尴尬）。<br></p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>接下来创建一个文件夹（位置随意），我创建在了D盘下，名称为hexo。从命令行进入该目录，然后输入<br></p><pre><code>npm install hexo-cli -g</code></pre><p>结果如图所示（我已安装过，就不再执行，这里引用一下我学习的博客中展示的图片）<br><br><img src="https://i.imgur.com/jiVxhNA.jpg" alt=""><br><br>出现一个WARN不必过虑，不会影响正常使用，继续输入<br></p><pre><code>npm install hexo --save</code></pre><p>在命令行刷过一堆白字后，接下来验证是否已经安装成功，输入<br></p><pre><code>hexo -v</code></pre><p><img src="https://i.imgur.com/MbInPEP.jpg" alt=""><br><br>如图所示，则代表安装成功，然后再安装一个拓展<br></p><pre><code>npm install hexo-deployer-git --save</code></pre><h2 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h2><p>接下来初始化Hexo，输入<br></p><pre><code>hexo initnpm install</code></pre><p>接下里npm会自动安装需要的组建，只需等待npm操作即可。完成后继续输入<br></p><pre><code>hexo g</code></pre><p><img src="https://i.imgur.com/9HStRL2.jpg" alt=""><br><br>提示：<br></p><blockquote><p>INFO Hexo is running at <a href="http://0.0.0.0:4000/" target="_blank" rel="noopener">http://0.0.0.0:4000/</a>. Press Ctrl+C to stop.</p></blockquote><p>打开浏览器在地址栏输入<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>，打开后<br><br><img src="https://i.imgur.com/FHW3Z2e.jpg" alt=""><br><br>若如图中所示，则说明Hexo在本地已经配置结束。</p><h1 id="关联Hexo和GitHub-page"><a href="#关联Hexo和GitHub-page" class="headerlink" title="关联Hexo和GitHub page"></a>关联Hexo和GitHub page</h1><h2 id="配置Git个人信息"><a href="#配置Git个人信息" class="headerlink" title="配置Git个人信息"></a>配置Git个人信息</h2><ol><li>设置Git的user name和email（若之前已经配置过则可以跳过）</li></ol><pre><code>git config --global user.name &quot;your name&quot;git config --global user.email &quot;your email&quot;</code></pre><ol><li>生成密钥</li></ol><pre><code>ssh-keygen -t rsa -C &quot;your email&quot;</code></pre><p>将生成的密钥添加到GitHub账户的SSH keys中，具体操作参考 gdutxiaoxu的<a href="http://blog.csdn.net/gdutxiaoxu/article/details/53573399" target="_blank" rel="noopener">Git ssh 配置及使用</a></p><h2 id="配置Deployment"><a href="#配置Deployment" class="headerlink" title="配置Deployment"></a>配置Deployment</h2><p>在你刚才创建安装hexo的目录下找到_config.yml文件，打开找到Deployment，然后如下修改<br></p><pre><code>deploy:    type: git    repo: git@github.com:yourname/yourname.github.io.git    branch: master</code></pre><h1 id="编写博客、发布文章"><a href="#编写博客、发布文章" class="headerlink" title="编写博客、发布文章"></a>编写博客、发布文章</h1><p>新建一篇博客，执行命令<br></p><pre><code>hexo new post &quot;Test&quot;</code></pre><p>回车执行后会提示 </p><blockquote><p>INFO Created:安装目录\source_posts\test.md</p></blockquote><p>然后用MarkDownPad2进行编辑就可以，文章编辑好后运行生成、部署命令<br></p><pre><code>hexo g  //生成hexo d  //部署hexo d -g  //这是二合一，与上面两条命令结果相同</code></pre><p>部署成功后访问地址 <a href="https://yourname.github.io" target="_blank" rel="noopener">https://yourname.github.io</a> 就可以看到结果啦！<br></p><h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><p>我现在用的是 <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a>，里面有中文文档可以参阅，具体的样式设置、语言设置、新页面等都有说明。这里就不再多做记录，犯懒了。</p><h1 id="添加插件"><a href="#添加插件" class="headerlink" title="添加插件"></a>添加插件</h1><p>添加sutenao个feed插件，命令行进入安装hexo的目录，输入<br></p><pre><code>npm install hexo-generator-feed -savenpm install hexo-generator-sitemap -save</code></pre><p>修改_config.yml，增加一下内容<br></p><pre><code>Plugins:- hexo-generator-feed- hexo-generator-sitemapfeed:type:atompath: atom.xmllimit: 20sitemap:path: sitemap.xml</code></pre><p>在执行一下命令，部署服务端<br></p><pre><code>hexo d -g</code></pre><p>配完之后，就可以访问 <a href="https://yourname.github.io/atom.xml" target="_blank" rel="noopener">https://yourname.github.io/atom.xml</a> 和 <a href="https://yourname.github.io/sitemap.xml" target="_blank" rel="noopener">https://yourname.github.io/sitemap.xml</a> ，发现这两个文件已经成功生成了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文引用于 gdutxiaoxu的&lt;a href=&quot;http://blog.csdn.net/gdutxiaoxu/article/details/53576018&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo+GitHub搭建个人博客&lt;/a&gt; 
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
