<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yc&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-19T06:38:14.008Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo 备份与恢复</title>
    <link href="http://yoursite.com/uncategorized/HexoBackup/"/>
    <id>http://yoursite.com/uncategorized/HexoBackup/</id>
    <published>2018-03-19T05:28:05.000Z</published>
    <updated>2018-03-19T06:38:14.008Z</updated>
    
    <content type="html"><![CDATA[<p>前几天搭建好 hexo 后，接下来就研究如何对 hexo 进行备份，解决换电脑后无法编辑博客的尴尬情景。解决方案网上有很多，在此记录一种刚测试通过的处理流程。</p><h2 id="在码云或者GitHub上创建代码库，保留以下目录"><a href="#在码云或者GitHub上创建代码库，保留以下目录" class="headerlink" title="在码云或者GitHub上创建代码库，保留以下目录"></a>在码云或者GitHub上创建代码库，保留以下目录</h2><pre><code>scaffoldssourcethemes_config.ymlpackage.json.gitgnore</code></pre><p>注：_config.yml是站点配置文件，theme中是主题，source博客编辑文件，scaffolds文章模板，package.json包使用说明和.gitgnore限定提交的时候哪些文件可以忽略。.gitgnore这个目录我没有，具体原因没有细究所以就忽略了这个目录，不影响结果。将目录推送至代码库。</p><h2 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h2><ul><li>node.js</li><li>Git</li><li>MarkDownPad 2</li></ul><p>安装过程参考搭建过程，只需注意不要执行 hexo init，据说会清空 _config.yml 的内容至默认。把备份的代码库 clone 到本地，打开命令行至根目录依次执行以下指令</p><pre><code>npm install hexo-cli -gnpm install hexo --savenpm installhexo generate</code></pre><p>安装之前装过的组件</p><pre><code>npm install hexo-deployer-git --savenpm install hexo-generator-feed -savenpm install hexo-generator-sitemap -savenpm install hexo-generator-searchdb --savenpm install hexo-wordcount --save</code></pre><p>最后启动测试一下是否正常运行就完事了，之后新增或修改文章后记得推送到代码库就可以（还是那几个文件）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前几天搭建好 hexo 后，接下来就研究如何对 hexo 进行备份，解决换电脑后无法编辑博客的尴尬情景。解决方案网上有很多，在此记录一种刚测试通过的处理流程。&lt;/p&gt;
&lt;h2 id=&quot;在码云或者GitHub上创建代码库，保留以下目录&quot;&gt;&lt;a href=&quot;#在码云或者GitH
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Git连接超时</title>
    <link href="http://yoursite.com/uncategorized/GitTimeOut/"/>
    <id>http://yoursite.com/uncategorized/GitTimeOut/</id>
    <published>2018-03-17T04:18:19.000Z</published>
    <updated>2018-03-19T04:12:39.657Z</updated>
    
    <content type="html"><![CDATA[<p>今天写完文章提交时碰到了Git连接超时问题，提示如下<br></p><blockquote><p>Error: ssh: connect to host github.com port 22: Connection timed out…</p></blockquote><p>解决方案为<br><br>找到安装Git的根目录/etc/ssh/ssh_config文件，用编辑器打开后添加下列内容<br>    Host github.com</p><pre><code>User gitHostname ssh.github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/id_rsaPort 443</code></pre><p>执行 <code>ssh -T git@github.com</code> 测试git是否成功连接github<br><br><img src="https://i.imgur.com/QarijrH.png" alt=""><br><br>询问是否确定想继续连接时直接 yes 就可以，完工！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天写完文章提交时碰到了Git连接超时问题，提示如下&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Error: ssh: connect to host github.com port 22: Connection timed out…&lt;/p&gt;
&lt;/blockquote
      
    
    </summary>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Nginx域名跳转</title>
    <link href="http://yoursite.com/uncategorized/NginxAutoMaticJump/"/>
    <id>http://yoursite.com/uncategorized/NginxAutoMaticJump/</id>
    <published>2018-03-17T03:26:12.000Z</published>
    <updated>2018-03-19T04:12:39.657Z</updated>
    
    <content type="html"><![CDATA[<h1 id="利用修改-Nginx-的-nginx-conf-文件实现域名跳转"><a href="#利用修改-Nginx-的-nginx-conf-文件实现域名跳转" class="headerlink" title="利用修改 Nginx 的 nginx.conf 文件实现域名跳转"></a>利用修改 Nginx 的 nginx.conf 文件实现域名跳转</h1><pre><code>worker_processes  2;#工作进程的个数，一般与计算机的cpu核数一致  events {      worker_connections  1024;#单个进程最大连接数（最大连接数=连接数*进程数）  }  http {      include       mime.types; #文件扩展名与文件类型映射表      default_type  application/octet-stream;#默认文件类型      sendfile        on;#开启高效文件传输模式    keepalive_timeout  65; #长连接超时时间，单位是秒      gzip  on;#启用Gizp压缩      #服务器的集群      upstream  liyachuan.com {  #服务器集群名字           server    127.0.0.1:80  weight=1;#服务器配置   weight是权重的意思，权重越大，分配的概率越大。     }     #当前的Nginx的配置      server {          listen       80;#监听80端口，可以改成其他端口          server_name  59.110.170.223;##############   当前服务的域名          location / {                  proxy_pass https://liyachuan.github.io;              }         error_page   500 502 503 504  /50x.html;          location = /50x.html {              root   html;          }      }  }</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;利用修改-Nginx-的-nginx-conf-文件实现域名跳转&quot;&gt;&lt;a href=&quot;#利用修改-Nginx-的-nginx-conf-文件实现域名跳转&quot; class=&quot;headerlink&quot; title=&quot;利用修改 Nginx 的 nginx.conf 文件实现
      
    
    </summary>
    
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat自动跳转</title>
    <link href="http://yoursite.com/uncategorized/TomcatAutoMaticJump/"/>
    <id>http://yoursite.com/uncategorized/TomcatAutoMaticJump/</id>
    <published>2018-03-16T15:56:52.000Z</published>
    <updated>2018-03-19T04:12:39.658Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tomcat自动跳转"><a href="#Tomcat自动跳转" class="headerlink" title="Tomcat自动跳转"></a>Tomcat自动跳转</h1><p>汗颜，有个笨方法用以实现自动跳转。将 webapps 下ROOT目录的 index.jsp 改为 index.jsp.bak 作为备份，创建 index.html 文件，内容为<br></p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;自动跳转&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;                    　　　　window.location.href=&quot;https://liyachuan.github.io&quot;; &lt;!--跳转页面--&gt;&lt;/script&gt;&lt;/html&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Tomcat自动跳转&quot;&gt;&lt;a href=&quot;#Tomcat自动跳转&quot; class=&quot;headerlink&quot; title=&quot;Tomcat自动跳转&quot;&gt;&lt;/a&gt;Tomcat自动跳转&lt;/h1&gt;&lt;p&gt;汗颜，有个笨方法用以实现自动跳转。将 webapps 下ROOT目录的 in
      
    
    </summary>
    
    
      <category term="Tomcat" scheme="http://yoursite.com/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>搭建个人博客</title>
    <link href="http://yoursite.com/uncategorized/BuildBlog/"/>
    <id>http://yoursite.com/uncategorized/BuildBlog/</id>
    <published>2018-03-16T13:12:04.000Z</published>
    <updated>2018-03-19T04:12:39.657Z</updated>
    
    <content type="html"><![CDATA[<p>本文引用于 gdutxiaoxu的<a href="http://blog.csdn.net/gdutxiaoxu/article/details/53576018" target="_blank" rel="noopener">Hexo+GitHub搭建个人博客</a> 少做修改作为学习记录。</p><h1 id="记录今日搭建博客流程和遇到的问题"><a href="#记录今日搭建博客流程和遇到的问题" class="headerlink" title="记录今日搭建博客流程和遇到的问题"></a>记录今日搭建博客流程和遇到的问题</h1><ul><li>安装、配置Hexo</li><li>将Hexo与github page关联</li><li>发布文章</li><li>主题</li><li>添加sitemap和feed插件</li></ul><h1 id="安装、配置Hexo"><a href="#安装、配置Hexo" class="headerlink" title="安装、配置Hexo"></a>安装、配置Hexo</h1><ul><li><a href="https://nodejs.org/dist/v6.9.0/node-v6.9.0-x64.msi" target="_blank" rel="noopener">Windows Installer 64-bit</a></li><li><a href="https://nodejs.org/dist/v6.9.0/node-v6.9.0-x32.msi" target="_blank" rel="noopener">Windows Installer 32-bit</a></li></ul><p>根据Windows版本选择相应的安装文件（右键‘我的电脑’属性中查看）。下载完成后默认安装就可以，放置路径可以自行修改。安装结束后同时按下Win+R打开运行窗口，键入cmd后点击确定按钮。在打开的窗口中输入<br>    <code>node -v</code><br><br>    <code>npm -v</code><br><br>得到的结果若如下图所示，则说明安装成功<br><br><img src="https://i.imgur.com/WVaVzA8.png" alt=""><br><br><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git官网下载地址</a>，Git的安装过程同样保持默认就可以，安装路径可以自行修改。安装完成后Win+R打开命令行，输入<br><br>    <code>git --version</code><br><br>得到结果如下图则代表正确<br><br><img src="https://i.imgur.com/SeSJFLm.png" alt=""><br></p><h2 id="GitHub账户注册与配置"><a href="#GitHub账户注册与配置" class="headerlink" title="GitHub账户注册与配置"></a>GitHub账户注册与配置</h2><p>Git方面博主也是新手，这里不再过多阐述。可以参考<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰的Git教程</a>自行学习，写的非常非常好<br><br>在完成注册之后创建代码库，如图所示<br><br><img src="https://i.imgur.com/VcppaVl.png" alt=""><br><br>在创建代码库页面中，Repository name表单中填写yourname.github.io，Description(optional)选填。如图所示<br><br><img src="https://i.imgur.com/OVtk7Bj.png" alt=""><br><br>我的名字是liyachuan,所以我在此处填写liyachuan.github.io。填写完成后点击创建代码库按钮级进行提交。在创建成功后的页面上面的tap中选择settings，下拉至GitHub Pages。若如下图所示则说明该功能开启。没有的话请百度一下，因为我创建的时候GitHub就自动配置了，我没有配置过（尴尬）。<br></p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>接下来创建一个文件夹（位置随意），我创建在了D盘下，名称为hexo。从命令行进入该目录，然后输入<br><br>    <code>npm install hexo-cli -g</code><br><br>结果如图所示（我已安装过，就不再执行，这里引用一下我学习的博客中展示的图片）<br><br><img src="https://i.imgur.com/jiVxhNA.jpg" alt=""><br><br>出现一个WARN不必过虑，不会影响正常使用，继续输入<br><br>    <code>npm install hexo --save</code><br><br>在命令行刷过一堆白字后，接下来验证是否已经安装成功，输入<br><br>    <code>hexo -v</code><br><br><img src="https://i.imgur.com/MbInPEP.jpg" alt=""><br><br>如图所示，则代表安装成功，然后再安装一个拓展<br><br>    <code>npm install hexo-deployer-git --save</code><br></p><h2 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h2><p>接下来初始化Hexo，输入<br><br>    <code>hexo init</code><br><br>    <code>npm install</code><br><br>接下里npm会自动安装需要的组建，只需等待npm操作即可。完成后继续输入<br><br>    <code>hexo g</code><br><br><img src="https://i.imgur.com/9HStRL2.jpg" alt=""><br><br>提示：<br></p><blockquote><p>INFO Hexo is running at <a href="http://0.0.0.0:4000/" target="_blank" rel="noopener">http://0.0.0.0:4000/</a>. Press Ctrl+C to stop.</p></blockquote><p>打开浏览器在地址栏输入<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>，打开后<br><br><img src="https://i.imgur.com/FHW3Z2e.jpg" alt=""><br><br>若如图中所示，则说明Hexo在本地已经配置结束。</p><h1 id="关联Hexo和GitHub-page"><a href="#关联Hexo和GitHub-page" class="headerlink" title="关联Hexo和GitHub page"></a>关联Hexo和GitHub page</h1><h2 id="配置Git个人信息"><a href="#配置Git个人信息" class="headerlink" title="配置Git个人信息"></a>配置Git个人信息</h2><ol><li><p>设置Git的user name和email（若之前已经配置过则可以跳过）<br><code>git config --global user.name &quot;your name&quot;</code><br><br> <code>git config --global user.email &quot;your email&quot;</code><br></p></li><li><p>生成密钥<br><code>ssh-keygen -t rsa -C &quot;your email&quot;</code><br><br>将生成的密钥添加到GitHub账户的SSH keys中，具体操作参考 gdutxiaoxu的<a href="http://blog.csdn.net/gdutxiaoxu/article/details/53573399" target="_blank" rel="noopener">Git ssh 配置及使用</a></p></li></ol><h2 id="配置Deployment"><a href="#配置Deployment" class="headerlink" title="配置Deployment"></a>配置Deployment</h2><p>在你刚才创建安装hexo的目录下找到_config.yml文件，打开找到Deployment，然后如下修改<br></p><blockquote><p>deploy:<br>    type: git<br>    repo: <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:yourname/yourname.github.io.git<br>    branch: master</p></blockquote><h1 id="编写博客、发布文章"><a href="#编写博客、发布文章" class="headerlink" title="编写博客、发布文章"></a>编写博客、发布文章</h1><p>新建一篇博客，执行命令<br><br>    <code>hexo new post &quot;test&quot;</code><br><br>回车执行后会提示 </p><blockquote><p>INFO Created:安装目录\source_posts\test.md</p></blockquote><p>然后用MarkDownPad2进行编辑就可以，文章编辑好后运行生成、部署命令<br><br>    <code>hexo g  //生成</code><br><br>    <code>hexo d  //部署</code><br><br>    <code>hexo d -g  //这是二合一，与上面两条命令结果相同</code><br><br>部署成功后访问地址 <a href="https://yourname.github.io" target="_blank" rel="noopener">https://yourname.github.io</a> 就可以看到结果啦！<br></p><h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><p>我现在用的是 <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a>，里面有中文文档可以参阅，具体的样式设置、语言设置、新页面等都有说明。这里就不再多做记录，犯懒了。</p><h1 id="添加插件"><a href="#添加插件" class="headerlink" title="添加插件"></a>添加插件</h1><p>添加sutenao个feed插件，命令行进入安装hexo的目录，输入<br><br>    <code>npm install hexo-generator-feed -save</code><br><br>    <code>npm install hexo-generator-sitemap -save</code><br><br>修改_config.yml，增加一下内容<br></p><blockquote><p>Plugins:</p><ul><li>hexo-generator-feed</li><li>hexo-generator-sitemap<br>feed:<br>&nbsp;&nbsp;&nbsp;&nbsp;type:atom<br>&nbsp;&nbsp;&nbsp;&nbsp;path: atom.xml<br>&nbsp;&nbsp;&nbsp;&nbsp;limit: 20<br>sitemap:<br>&nbsp;&nbsp;&nbsp;&nbsp;path: sitemap.xml</li></ul></blockquote><p>在执行一下命令，部署服务端<br><br>    <code>hexo d -g</code><br><br>配完之后，就可以访问 <a href="https://yourname.github.io/atom.xml" target="_blank" rel="noopener">https://yourname.github.io/atom.xml</a> 和 <a href="https://yourname.github.io/sitemap.xml" target="_blank" rel="noopener">https://yourname.github.io/sitemap.xml</a> ，发现这两个文件已经成功生成了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文引用于 gdutxiaoxu的&lt;a href=&quot;http://blog.csdn.net/gdutxiaoxu/article/details/53576018&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo+GitHub搭建个人博客&lt;/a&gt; 
      
    
    </summary>
    
    
      <category term="博客搭建" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
</feed>
